/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ASUS
 */
import Items.*;
import Roles.*;
import java.awt.Color;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Timer;

public class Main extends javax.swing.JFrame {
    Roles role;
    Library library = null;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        init();
        editClock();
        startClock();
        setTitle("Manajemen Perpustakaan");
        
//        setFlatStyle(btn_display);
//        setFlatStyle(btn_add_or_borrow);
//        setFlatStyle(btn_delete_or_return);
//        setFlatStyle(btn_edit_or_find);
//        setFlatStyle(btn_borrow);
    }
    
    private void setFlatStyle(javax.swing.JButton button) {
        button.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.GRAY)); // Flat border
        button.setFocusPainted(false); // Hilangkan efek fokus
        button.setContentAreaFilled(false); // Hilangkan efek 3D
        button.setOpaque(true); // Pastikan background tampil
        button.setBackground(java.awt.Color.WHITE); // Kembali ke warna putih
        
        // Tambahkan efek hover
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new java.awt.Color(220, 220, 220)); // Warna saat hover
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(java.awt.Color.WHITE); // Kembali ke warna putih
            }
        });
    }

    
    private void editClock(){
        clockLabel.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 14)); // Atur font
        clockLabel.setForeground(java.awt.Color.BLUE); // Ubah warna teks
        clockLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER); // Atur teks ke tengah
        clockLabel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.GRAY, 1)); // Tambahkan border
    }
    
    private void startClock() {
        // Format waktu
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        
        // Timer untuk memperbarui setiap detik
        Timer timer = new Timer(500, e -> {
            String time = sdf.format(new Date());
            clockLabel.setText(time);
        });
        timer.start(); // Mulai timer
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_display = new javax.swing.JButton();
        btn_add_or_borrow = new javax.swing.JButton();
        btn_delete_or_return = new javax.swing.JButton();
        btn_edit_or_find = new javax.swing.JButton();
        clockLabel = new javax.swing.JLabel();
        btn_borrow = new javax.swing.JButton();
        access = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_display.setText("Tampil Semua Item");
        btn_display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_displayActionPerformed(evt);
            }
        });

        btn_add_or_borrow.setText("Masukkan Data Baru");
        btn_add_or_borrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_or_borrowActionPerformed(evt);
            }
        });

        btn_delete_or_return.setText("Hapus Data");
        btn_delete_or_return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete_or_returnActionPerformed(evt);
            }
        });

        btn_edit_or_find.setText("Edit Data Item");
        btn_edit_or_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_edit_or_findActionPerformed(evt);
            }
        });

        clockLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btn_borrow.setText("Lihat Item Dipinjam");
        btn_borrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_borrowActionPerformed(evt);
            }
        });

        access.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        access.setText("Login as Admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(clockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add_or_borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_display, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btn_edit_or_find, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_delete_or_return, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(91, 91, 91))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(access)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(clockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(access)
                .addGap(12, 12, 12)
                .addComponent(btn_display, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_add_or_borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete_or_return, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_edit_or_find, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_edit_or_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_edit_or_findActionPerformed
        handleOptionFour();
    }//GEN-LAST:event_btn_edit_or_findActionPerformed

    private void btn_displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_displayActionPerformed
        library.displayAll();
    }//GEN-LAST:event_btn_displayActionPerformed

    private void btn_delete_or_returnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete_or_returnActionPerformed
        handleOptionThree(library);
    }//GEN-LAST:event_btn_delete_or_returnActionPerformed

    private void btn_add_or_borrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_or_borrowActionPerformed
        handleOptionTwo(library);
    }//GEN-LAST:event_btn_add_or_borrowActionPerformed

    private void btn_borrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_borrowActionPerformed
        displayBorrow(library);
    }//GEN-LAST:event_btn_borrowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    private void init(){
        library = Library.getInstance();
        library.addItem(new Book("Harry Potter", "B001", 10, "J.K. Rowling", 400));
        library.addItem(new DVD("Inception", "D001", 5, "Christopher Nolan", 148));
        library.addItem(new Magazine("National Geographic", "M001", 12, "NG Media", "2024-01"));
        library.addItem(new Book("The Hobbit", "B002", 3, "J.R.R. Tolkien", 310));
        library.addItem(new Book("1984", "B003", 8, "George Orwell", 328));
        library.addItem(new Book("To Kill a Mockingbird", "B004", 4, "Harper Lee", 281));
        library.addItem(new Book("Pride and Prejudice", "B005", 3, "Jane Austen", 432));
        library.addItem(new Book("The Great Gatsby", "B006", 9, "F. Scott Fitzgerald", 180));
        library.addItem(new Book("Moby Dick", "B007", 6, "Herman Melville", 635));
        library.addItem(new DVD("The Matrix", "D002", 9, "The Wachowskis", 136));
        library.addItem(new DVD("The Godfather", "D003", 7, "Francis Ford Coppola", 175));
        library.addItem(new DVD("The Dark Knight", "D004", 8, "Christopher Nolan", 152));
        library.addItem(new DVD("The Shawshank Redemption", "D005", 20, "Frank Darabont", 142));
        library.addItem(new Magazine("Time", "M002", 15, "Time Inc.", "2024-02"));
        library.addItem(new Magazine("Scientific American", "M003", 4, "Springer Nature", "2024-03"));
        library.addItem(new Magazine("Vogue", "M004", 4, "Condé Nast", "2024-04"));
        library.addItem(new LibraryItem("Proyektor", "E006", 3));
        library.addItem(new LibraryItem("Whiteboard", "E008", 2));
        library.addItem(new LibraryItem("Meja", "E010", 20));
        library.addItem(new LibraryItem("Kamera Video", "E011", 5));
        library.addItem(new LibraryItem("Komputer", "Z011", 7));

        role = checkAdmin();
        if(role instanceof Admin){
            btn_add_or_borrow.setText("Masukkan Item Baru");
            btn_delete_or_return.setText("Hapus Item");
            btn_edit_or_find.setText("Edit Item");
            btn_borrow.setVisible(false);
            access.setText("Login as Admin");
        }
        else {
            btn_add_or_borrow.setText("Pinjam Item");
            btn_delete_or_return.setText("Kembalikan Item");
            btn_edit_or_find.setText("Cari Item");
            btn_borrow.setVisible(true);
            access.setText("Login as User");
        }
        this.revalidate();
        this.repaint();
    }
    
    private Roles checkAdmin() {
        Login loginPanel = new Login();
        javax.swing.JDialog dialog = new javax.swing.JDialog((javax.swing.JFrame) null, "Login", true);
        dialog.getContentPane().add(loginPanel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);

        // Variabel untuk menyimpan status login
        boolean loginSuccessful = false;
        Roles userRole = null;

        // Mengulang dialog login sampai login berhasil atau pengguna memilih Cancel
        while (!loginSuccessful) {
            dialog.setVisible(true); // Menunggu sampai dialog ditutup

            String username = loginPanel.getUser();
            String password = loginPanel.getPass();
            if(username == null) System.exit(0);
            if(loginPanel.getUser().equals("user")) return new User();
            if (username.equals(Admin.getUser()) && password.equals(Admin.getPass())) {
                userRole = new Admin();
                loginSuccessful = true;
            } else {
                int confirm = JOptionPane.showConfirmDialog(null, 
                    "Username atau Password salah. Ingin login sebagai user saja?", 
                    "Login Gagal", JOptionPane.OK_CANCEL_OPTION);

                if (confirm == JOptionPane.CANCEL_OPTION) {  // Jika Cancel ditekan
                    System.exit(0);  // Keluar dari aplikasi
                } else if (confirm == JOptionPane.OK_OPTION) {
                    userRole = new User();  // Kembalikan sebagai user
                    loginSuccessful = true;
                }
            }
        }
        return userRole;
    }

    
    private void handleOptionTwo(Library library) {
        if(role instanceof Admin){
            LibraryItem newItem = input();
            if (newItem != null) library.addItem(newItem);
            else JOptionPane.showMessageDialog(null, "Input dibatalkan"); //ini error
        }
        else {
            String itemId = JOptionPane.showInputDialog(
                null,
                "Masukkan ID Item: ",
                "Input Data",
                JOptionPane.QUESTION_MESSAGE
            );
            LibraryItem item = library.findItem(itemId);
            if (item != null){
                item.borrowItem();
                try {
                    LibraryItem cloneItem = (LibraryItem) item.clone();
                    cloneItem.setAmount(1);
                    library.user_data.add(cloneItem);
                }
                catch (CloneNotSupportedException e) {
                    e.printStackTrace();  // Menangani pengecualian jika clone tidak didukung
                }
            }
            else JOptionPane.showMessageDialog(null, "Item tidak ditemukan");
        }
    }
    
    private void handleOptionThree(Library library) {
        String itemId = JOptionPane.showInputDialog(
            null, "Masukkan ID Item: ",
            "Input Data", JOptionPane.QUESTION_MESSAGE
        );
        
        LibraryItem item = library.findItem(itemId);
        if (item != null){
            if (role instanceof Admin) library.delete(item);
            else {
                item.returnItem();
                LibraryItem target = null;
                for (LibraryItem obj : library.user_data) {
                    if (obj.getItemId().equals(item.getItemId())) { // Bandingkan id
                        target = obj;
                    }
                }
                library.user_data.remove(target);
            }
        }
        else JOptionPane.showMessageDialog(null, "Item tidak ditemukan.\n");
    }
    
    private void handleOptionFour(){
        String itemId = JOptionPane.showInputDialog(
            null, "Masukkan ID Item: ",
            "Input Data", JOptionPane.QUESTION_MESSAGE
        );
        
        LibraryItem item = library.findItem(itemId);
        if (item != null) {
//            int type = item instanceof Book ? 1 : item instanceof DVD ? 2 : 3;
            if(role instanceof Admin){
                LibraryItem newItem = input();
                if (newItem != null){
                    for(int i = 0; i < library.size(); i++){
                        if(library.at(i).getItemId().equals(itemId))library.change(i, newItem);
                    }
                }
            }
            else {
                ArrayList<LibraryItem> temp = new ArrayList<>();
                temp.add(item);
                library.display(temp);
            }
            
        }
        else JOptionPane.showMessageDialog(null, "Item tidak ditemukan.\n");
    }
    
    private void displayBorrow(Library library){
        library.display(library.user_data);
    }
    
    private LibraryItem input() {   
        Add newAdd = new Add();
        newAdd.setVisible(true);
        
        if (newAdd.isConfirmed()) {  
            LibraryItem newItem = newAdd.getNewItem();  
            if (newItem != null) return newItem;  
            else JOptionPane.showMessageDialog(null, "Item tidak berhasil dibuat.");
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel access;
    private javax.swing.JButton btn_add_or_borrow;
    private javax.swing.JButton btn_borrow;
    private javax.swing.JButton btn_delete_or_return;
    private javax.swing.JButton btn_display;
    private javax.swing.JButton btn_edit_or_find;
    private javax.swing.JLabel clockLabel;
    // End of variables declaration//GEN-END:variables
}
