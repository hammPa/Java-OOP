package Items;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ASUS
 */
import java.util.ArrayList;
import java.util.Arrays;
import Items.*;

public class Display extends javax.swing.JFrame {
    private ArrayList<LibraryItem> items;
    private ArrayList<javax.swing.JLabel> dynamicLabels = new ArrayList<>();  // Track created labels
    private ArrayList<LibraryItem> originalItems;
    
    int currentPage = 1;
    int itemsPerPage = 7;
    int totalPages;
    /**
     * Creates new form Display
     */
    public Display(ArrayList<LibraryItem> items) {
        initComponents();
        this.setResizable(false);
        setTitle("Display Items");
        this.items = items;
        Items.requestFocus();
        this.originalItems = new ArrayList<>(items); // Simpan daftar asli
        this.totalPages = (int) Math.ceil((double) items.size() / itemsPerPage);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        
        // Initially disable previous button
        btn_prev.setEnabled(false);
        
        // Add document listener to search field
        search.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                filterItems();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                filterItems();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                filterItems();
            }
        });

        initTable();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Items = new javax.swing.JLabel();
        btn_next = new javax.swing.JButton();
        btn_prev = new javax.swing.JButton();
        label_halaman = new javax.swing.JLabel();
        search = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Items.setText("Item Yang Tersedia");

        btn_next.setText("Next");
        btn_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nextActionPerformed(evt);
            }
        });

        btn_prev.setText("Previous");
        btn_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_prevActionPerformed(evt);
            }
        });

        label_halaman.setText("1");

        search.setText("Cari...");
        search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFocusLost(evt);
            }
        });
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchMouseExited(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(Items, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(btn_prev)
                        .addGap(42, 42, 42)
                        .addComponent(label_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btn_next))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(258, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Items)
                .addGap(19, 19, 19)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_prev)
                    .addComponent(label_halaman)
                    .addComponent(btn_next))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private javax.swing.JTable table;
    private javax.swing.JScrollPane scrollPane;
    private void initTable() {
        String[] columnName = {"No", "Title", "ID", "Type", "Jumlah"};
        Object[][] data = {};

        table = new javax.swing.JTable(data, columnName);

        // Customize the table appearance
        table.setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 12));
        table.setRowHeight(30); // Set row height for better readability
        table.setGridColor(java.awt.Color.LIGHT_GRAY); // Set grid color to a light gray
        table.setSelectionBackground(java.awt.Color.CYAN); // Set selection background color
        table.setSelectionForeground(java.awt.Color.BLACK); // Set selection text color

        // Customize table header
        javax.swing.table.JTableHeader header = table.getTableHeader();
        header.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 14)); // Bold header font
        header.setBackground(java.awt.Color.DARK_GRAY); // Header background color
        header.setForeground(java.awt.Color.BLACK); // Header text color

        // Customize table rows (alternate row color)
        table.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                java.awt.Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Set alternate row colors
                if (row % 2 == 0) {
                    cell.setBackground(java.awt.Color.WHITE);
                } else {
                    cell.setBackground(new java.awt.Color(245, 245, 245)); // Light gray for odd rows
                }

                return cell;
            }
        });

    // Add JScrollPane to the table
        scrollPane = new javax.swing.JScrollPane(table);
        scrollPane.setBounds(50, 100, 600, 240); // Adjust size as needed

        getContentPane().add(scrollPane);
    }

    private void filterItems() {
        // Get the search query from the search field
        String query = search.getText().trim().toLowerCase();

        // If the search field is empty, reset to the original list of items
        if (query.isEmpty() || query.equals("Cari...")) {
            items = new ArrayList<>(originalItems); // Reset to originalItems
        } else {
            // Filter items based on the search query
            ArrayList<LibraryItem> filteredItems = new ArrayList<>();
            for (LibraryItem item : originalItems) {
                // Example filter based on title, you can extend this to other fields
                if (item.getTitle().toLowerCase().contains(query) ||
                    item.getItemId().toLowerCase().contains(query)) {
                    filteredItems.add(item);
                }
            }

            // If there are filtered items, use them, else fallback to originalItems
            items = filteredItems.isEmpty() ? originalItems : filteredItems;
        }

        // Recalculate total pages based on filtered or original items
        totalPages = (int) Math.ceil((double) items.size() / itemsPerPage);

        // Adjust currentPage if it's out of range (e.g., when there are no results and currentPage exceeds totalPages)
        currentPage = Math.min(currentPage, totalPages);

        // Update the table with the filtered list of items
        updateTable();
    }


    
    private void updateTable() {
//        System.out.println("Current Page: " + currentPage);
//        System.out.println("Total Pages: " + totalPages);
        String[] columnName = {"No", "Title", "ID", "Type", "Jumlah"};
        int startIndex = (currentPage - 1) * itemsPerPage;
        int endIndex = Math.min(startIndex + itemsPerPage, items.size());
        Object[][] data = new Object[endIndex - startIndex][5];

        for (int i = startIndex; i < endIndex; i++) {
            int rowIndex = i - startIndex;
            LibraryItem item = items.get(i);
            data[rowIndex][0] = i + 1; // No
            data[rowIndex][1] = item.getTitle(); // Title
            data[rowIndex][2] = item.getItemId(); // ID
            data[rowIndex][3] = item.getClass().getSimpleName(); // Type
            data[rowIndex][4] = item.getAmount(); // Jumlah
        }

        // Update model tabel
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(data, columnName);
        table.setModel(model);

        // Atur lebar kolom
        table.getColumnModel().getColumn(0).setPreferredWidth(50);  // Lebar kolom "No"
        table.getColumnModel().getColumn(1).setPreferredWidth(200); // Lebar kolom "Title"
        table.getColumnModel().getColumn(2).setPreferredWidth(100); // Lebar kolom "ID"
        table.getColumnModel().getColumn(3).setPreferredWidth(100); // Lebar kolom "Type"
        table.getColumnModel().getColumn(4).setPreferredWidth(100); // Lebar kolom "Jumlah"

        // Update label halaman
        label_halaman.setText(currentPage + " / " + totalPages);

        // Atur tombol navigasi
        btn_prev.setEnabled(currentPage > 1);
        btn_next.setEnabled(currentPage < totalPages);
    }


    
    private void btn_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_prevActionPerformed
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    }//GEN-LAST:event_btn_prevActionPerformed

    private void btn_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nextActionPerformed
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
        }
    }//GEN-LAST:event_btn_nextActionPerformed

    private void searchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseExited
        Items.requestFocus();
        if(search.getText().length() == 0) search.setText("Cari...");
    }//GEN-LAST:event_searchMouseExited

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        search.setText("");
    }//GEN-LAST:event_searchActionPerformed

    private void searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusGained
        if (search.getText().equals("Cari...")) {
            search.setText("");
        }
    }//GEN-LAST:event_searchFocusGained

    private void searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusLost
        // Kembalikan teks default jika kosong
        if (search.getText().trim().isEmpty()) {
            search.setText("Cari...");
        }
    }//GEN-LAST:event_searchFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    ArrayList<LibraryItem> items = new ArrayList<>();
//        items.add(new Book("Harry Potter", "B001", "J.K. Rowling", 400));
//        items.add(new DVD("Inception", "D001", "Christopher Nolan", 148));
//        items.add(new Magazine("National Geographic", "M001", "NG Media", "2024-01"));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display(items).setVisible(true);
            }
        });
    }
    
    
    private javax.swing.JLabel createLabel(int itemIndex, int columnIndex) {
        return switch (columnIndex) {
            case 0 -> new javax.swing.JLabel(String.valueOf(itemIndex + 1));
            case 1 -> new javax.swing.JLabel(items.get(itemIndex).getTitle());
            case 2 -> new javax.swing.JLabel(items.get(itemIndex).getItemId());
            case 3 -> new javax.swing.JLabel(items.get(itemIndex).getClass().getSimpleName());
            case 4 -> new javax.swing.JLabel(String.valueOf(items.get(itemIndex).getAmount()));
            default -> null;
        };
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Items;
    private javax.swing.JButton btn_next;
    private javax.swing.JButton btn_prev;
    private javax.swing.JLabel label_halaman;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables
}
